#include<bits/stdc++.h>
using namespace std;

struct AdjListNode{
int dest;
struct AdjListNode* next;
};

struct AdjList{
struct AdjListNode* head;
};

struct Graph{
int V;
struct AdjList *arr;
};

struct AdjListNode* newAdjListNode(int dest){
struct AdjListNode* temp=(struct AdjListNode*)malloc(sizeof(struct AdjListNode));
temp->dest=dest;
temp->next=NULL;
return temp;
}

struct Graph* createGraph(int V){
struct Graph* graph=(struct Graph*)malloc(sizeof(struct Graph));
graph->V=V;
graph->arr=(struct AdjList*)malloc(sizeof(struct AdjList)*V);
int i=0;
while(i<V){
    graph->arr[i].head=NULL;
    i++;
}
return graph;
}
/*undirected graph*/
void addEdge(struct Graph* graph,int src,int dest){
struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->arr[src].head;
    graph->arr[src].head = newNode;
    newNode = newAdjListNode(src);
    newNode->next = graph->arr[dest].head;
    graph->arr[dest].head = newNode;
}
void printGraph(struct Graph* graph){

    int v;
    for (v = 0; v < graph->V; ++v)
    {
        struct AdjListNode* pCrawl = graph->arr[v].head;
        printf("\n Adjacency list of vertex %d\n head ", v);
        while (pCrawl)
        {
            printf("-> %d", pCrawl->dest);
            pCrawl = pCrawl->next;
        }
        printf("\n");
    }
}
int main()
{

    int V = 5;
    struct Graph* graph = createGraph(V);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 4);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);
    printGraph(graph);

    return 0;
}
